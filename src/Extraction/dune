(subdir Sigmalib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules SigmaIns Sigma Datatypes Vector 
   VectorDef Zpstar BinInt PosDef Functions BinNat Specif)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples))
 (library 
   (name Sigmalib)
   (libraries zarith)
   (modules :standard)))
 

(subdir SigmaHelioslib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules SigmaInsHelios Sigma Datatypes Vector 
   VectorDef Zpstar BinInt PosDef Functions BinNat)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples Coqprime Bignums))
 (library 
   (name SigmaHelioslib)
   (libraries zarith)
   (modules :standard)))
   
(subdir ParaSigmalib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules ParaSigmaIns ParallelSigma Sigma Datatypes Vector 
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Specif Util EqdepFacts Nat)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples))
 (library 
   (name ParaSigmalib)
   (libraries zarith)
   (modules :standard)))

(subdir AndSigmalib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules AndSigmaIns AndSigma Sigma Zpow_facts 
   Datatypes Vector 
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Specif Util EqdepFacts Nat)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples))
 (library 
   (name AndSigmalib)
   (libraries zarith)
   (modules :standard)))

(subdir Elgamallib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules Elgamal ElgamalIns
   Datatypes Vector 
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Util EqdepFacts)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples))
 (library 
   (name Elgamallib)
   (libraries zarith)
   (modules :standard)))

(subdir OrSigmalib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules OrSigmaIns OrSigma
   Datatypes Vector Nat Fin Specif Sigma
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Util EqdepFacts)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples))
 (library 
   (name OrSigmalib)
   (libraries zarith)
   (modules :standard)))

(subdir EncProoflib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules EncProofIns EncProof
   Datatypes Vector Nat Fin Specif Sigma
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Util EqdepFacts)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples))
 (library 
   (name EncProoflib)
   (libraries zarith)
   (modules :standard)))

(subdir EqSigmalib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules EqSigmaIns EqSigma
   Datatypes Vector Nat Specif Sigma
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Util)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples))
 (library 
   (name EqSigmalib)
   (libraries zarith)
   (modules :standard)))

(subdir Approvallib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules ApprovalIns Approval EncProof
   Datatypes Vector Nat Specif Sigma
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Util EqdepFacts Fin Elgamal)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples Frontend))
 (library 
   (name Approvallib)
   (libraries zarith)
   (modules :standard)))


(subdir Tallylib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules TallyIns Tally Approval 
   EncProof DecProof ChaumPedersen EqSigma
   Datatypes Vector Nat Specif Sigma
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Util EqdepFacts Elgamal)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples Frontend Backend))
 (library 
   (name Tallylib)
   (libraries zarith)
   (modules :standard)))



(subdir ChaumPedersenlib
 (coq.extraction
  (prelude Extraction)
  (extracted_modules ChaumPedersenIns ChaumPedersen EqSigma
   Datatypes Vector Nat Specif Sigma
   VectorDef Zpstar BinInt PosDef Functions BinNat 
   Util)
  (theories ExtLib Stdlib Utility Crypto Algebra 
   Probability Examples Frontend Backend))
 (library 
   (name ChaumPedersenlib)
   (libraries zarith)
   (modules :standard)))