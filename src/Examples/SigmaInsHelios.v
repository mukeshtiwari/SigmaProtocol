From Stdlib Require Import Utf8 ZArith.
From Crypto Require Import Sigma.
From Utility Require Import Zpstar.
From Examples Require Import primeP primeQ. 
Import Vspace Schnorr Zpfield Zpgroup.

(* https://github.com/benadida/js-voting-crypto/blob/master/test/elgamal-test.js#L14 *)
Section Helios.

  (* 256 bit Prime q*)
  Definition q : Z := 61329566248342901292543872769978950870633559608669337131139375508370458778917%Z.
  (* Eval compute in  N.size 61329566248342901292543872769978950870633559608669337131139375508370458778917. *)

  (* 2048 bit Prime p *)
  Definition p : Z := 16328632084933010002384055033805457329601614771185955389739167309086214800406465799038583634953752941675645562182498120750264980492381375579367675648771293800310370964745767014243638518442553823973482995267304044326777047662957480269391322789378384619428596446446984694306187644767462460965622580087564339212631775817895958409016676398975671266179637898557687317076177218843233150695157881061257053019133078545928983562221396313169622475509818442661047018436264806901023966236718367204710755935899013750306107738002364137917426595737403871114187750804346564731250609196846638183903982387884578266136503697493474682071%Z.
  
  (* 
  Eval compute in N.size 16328632084933010002384055033805457329601614771185955389739167309086214800406465799038583634953752941675645562182498120750264980492381375579367675648771293800310370964745767014243638518442553823973482995267304044326777047662957480269391322789378384619428596446446984694306187644767462460965622580087564339212631775817895958409016676398975671266179637898557687317076177218843233150695157881061257053019133078545928983562221396313169622475509818442661047018436264806901023966236718367204710755935899013750306107738002364137917426595737403871114187750804346564731250609196846638183903982387884578266136503697493474682071.
  *)
  
  
  (* safe prime *)
  Definition k : Z := Z.div p q. 

  Theorem safe_prime : p = (k * q + 1)%Z.
  Proof. vm_cast_no_check (eq_refl p).  Qed.

  Definition gval : Z := 14887492224963187634282421537186040801304008017743492304481737382571933937568724473847106029915040150784031882206090286938661464458896494215273989547889201144857352611058572236578734319505128042602372864570426550855201448111746579871811249114781674309062693442442368697449970648232621880001709535143047913661432883287150003429802392229361583608686643243349727791976247247948618930423866180410558458272606627111270040091203073580238905303994472202930783207472394578498507764703191288249547659899997131166130259700604433891232298182348403175947450284433411265966789131024573629546048637848902243503970966798589660808533%Z. 

  (* private key. *)
  Definition x : @Zp q :=
    {| Zpfield.v := 51796371230878246594092192713757255637102599536569172659263951511160666027893%Z; 
    Zpfield.Hv := eq_refl : (51796371230878246594092192713757255637102599536569172659263951511160666027893 mod q)%Z = 51796371230878246594092192713757255637102599536569172659263951511160666027893%Z |}.

 
  Definition g : @Schnorr_group p q.
  Proof. 
    refine 
      {| Schnorr.v := gval;
      Ha := conj eq_refl eq_refl : (0 < gval < p)%Z;
      Hb := _ (* eq_refl : (Zpow_mod gval q p)%Z = 1%Z *)|}.
    vm_cast_no_check (eq_refl (Zpow_facts.Zpow_mod gval q p)). 
  Defined.

  (* public key *)
  Definition h : @Schnorr_group p q := 
    Eval vm_compute in @pow _ _ _ safe_prime primeP.prime_p primeQ.prime_q g x.
  

  (* u is the randomness for commitment and c is the challenge. 
  For the moment, it is random but I need to *)
  Definition schnorr_protocol_construction_ins (u c : @Zp q) : 
    @sigma_proto (@Zp q) (@Schnorr_group p q) 1 1 1.
  Proof.
    refine (@schnorr_protocol Zp zp_add zp_mul 
      Schnorr_group pow x g u c).
    instantiate (1 := k%Z).
    vm_compute; reflexivity.
    eapply primeP.prime_p.
    eapply primeQ.prime_q. 
  Defined.

  (* Non-interactive: u is randomness and c is computed using 
  hashing. Commented because we hit an extraction bug. *)
  (* 
  Definition nizk_schnorr_protocol_construction_ins 
    (fn : @Schnorr_group p q -> String.string) (gn : N -> @Zp q) (u : @Zp q) : 
    @sigma_proto (@Zp q) (@Schnorr_group p q) 1 1 1.
  Proof.
    refine (@nizk_schnorr_protocol (@Schnorr_group p q) (@Zp q) fn gn 
      zp_add zp_mul pow x g h u).
    instantiate (1 := 2%Z).
    compute; reflexivity.
    eapply prime_p.
    eapply prime_q. 
  Defined.
  *)


  Definition schnorr_protocol_verification_ins : 
    @sigma_proto (@Zp q) (@Schnorr_group p q) 1 1 1 -> bool.
  Proof. 
    intro transcript.
    refine (@accepting_conversation (@Zp q) (@Schnorr_group p q)  
      mul_schnorr_group pow Schnorr.dec_zpstar g h transcript).
    eapply primeP.prime_p.
    eapply primeQ.prime_q.
    instantiate (1 := k%Z).
    vm_compute; reflexivity.
    eapply primeP.prime_p.
    eapply primeQ.prime_q.
  Defined.

End Helios.
